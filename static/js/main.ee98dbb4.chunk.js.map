{"version":3,"sources":["RelatedNetwork.js","App.js","reportWebVitals.js","index.js"],"names":["RelatedNetwork","props","visJsRef","useRef","useEffect","network","current","Network","nodes","edges","autoResize","color","on","event","length","changeSelectedNode","ref","style","height","width","maxWidth","minWidth","maxHeight","SelectField","splitFormProps","field","fieldOptions","options","rest","useField","value","setValue","meta","error","isTouched","onChange","e","target","disabled","map","option","InputField","React","forwardRef","isValidating","getInputProps","InputArea","MyForm","useForm","onSubmit","values","instance","a","addMessageToNode","selectedNode","message","console","log","debugForm","Form","isSubmitting","canSubmit","node_names","type","DataSet","Message","text","App","state","bind","fetch","then","res","json","data","setState","catch","this","getNodes","getEdges","nodeObject","find","node","id","requestOptions","method","headers","body","JSON","stringify","label","response","messages","concat","updateNodeToServer","className","float","n","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ee98dbb4.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { Network } from \"vis-network\";\n\n\n\nconst RelatedNetwork = (props) => {\n\tconst visJsRef = useRef(null);\n\n\tuseEffect(() => {\n\t\tconst network =\n\t\t\tvisJsRef.current &&\n\t\t\tnew Network(\n\t\t\t\tvisJsRef.current,\n\t\t\t\t{ nodes:props.nodes, edges:props.edges },\n\t\t\t\t{\n\t\t\t\t\tautoResize: true,\n\t\t\t\t\tedges: {\n\t\t\t\t\t\tcolor: \"#411811\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t\tnetwork?.on(\"selectNode\", (event) => {\n\t\t\t\tif (event.nodes?.length === 1) {\n\t\t\t\t\tprops.changeSelectedNode(event.nodes[0]);\n\t\t\t\t\t// window.location.href = event.nodes[0];\n\t\t\t\t};\n\t\t\t});\n\t\t\tnetwork?.on(\"click\", (event) => {\n\t\t\t\tif (!(event.nodes?.length === 1)) {\n\t\t\t\t\tprops.changeSelectedNode(null);\n\t\t\t\t};\n\t\t\t});\n\t\t\t}, [visJsRef, props.nodes, props.edges]);\n\n\treturn (\n\t\t<div\n\t\t\tref={visJsRef}\n\t\t\tstyle={{\n\t\t\t\theight: `1024px`,\n\t\t\t\twidth: `1900px`,\n\t\t\t\tmaxWidth: \"1024\",\n\t\t\t\tminWidth: \"30%\",\n\t\t\t\tmaxHeight: \"512px\"\n\t\t\t}}\n\t\t/>\n\t);\n};\n\nexport default RelatedNetwork;","import './App.css';\nimport { data } from './data.js';\nimport { Graph } from \"react-d3-graph\";\nimport { useForm, useField, splitFormProps } from \"react-form\";\nimport React from \"react\";\nimport RelatedNetwork from \"./RelatedNetwork\";\nimport { DataSet } from \"vis-data\";\n\n\n\nfunction validateAddressStreet(value) {\n  if (!value) {\n    return \"A street is required\";\n  }\n  return false;\n}\n\nfunction SelectField(props) {\n  const [field, fieldOptions, { options, ...rest }] = splitFormProps(props);\n\n  const {\n    value = \"\",\n    setValue,\n    meta: { error, isTouched }\n  } = useField(field, fieldOptions);\n\n  const handleSelectChange = e => {\n    setValue(e.target.value);\n  };\n\n  return (\n    <>\n      <select {...rest} value={value} onChange={handleSelectChange}>\n        <option disabled value=\"\" />\n        {options.map(option => (\n          <option key={option} value={option}>\n            {option}\n          </option>\n        ))}\n      </select>{\" \"}\n      {isTouched && error ? <em>{error}</em> : null}\n    </>\n  );\n}\n\nconst InputField = React.forwardRef((props, ref) => {\n  // Let's use splitFormProps to get form-specific props\n  const [field, fieldOptions, rest] = splitFormProps(props);\n\n  // Use the useField hook with a field and field options\n  // to access field state\n  const {\n    meta: { error, isTouched, isValidating },\n    getInputProps\n  } = useField(field, fieldOptions);\n\n  // Build the field\n  return (\n    <>\n      <input {...getInputProps({ ref, ...rest })} />{\" \"}\n      {isValidating ? (\n        <em>Validating...</em>\n      ) : isTouched && error ? (\n        <em>{error}</em>\n      ) : null}\n    </>\n  );\n});\n\n\nconst InputArea = React.forwardRef((props, ref) => {\n  // Let's use splitFormProps to get form-specific props\n  const [field, fieldOptions, rest] = splitFormProps(props);\n\n  // Use the useField hook with a field and field options\n  // to access field state\n  const {\n    meta: { error, isTouched, isValidating },\n    getInputProps\n  } = useField(field, fieldOptions);\n\n  // Build the field\n  return (\n    <>\n      <textarea {...getInputProps({ ref, ...rest })} />{\" \"}\n      {isValidating ? (\n        <em>Validating...</em>\n      ) : isTouched && error ? (\n        <em>{error}</em>\n      ) : null}\n    </>\n  );\n});\n\n\nfunction MyForm(props) {\n  // Use the useForm hook to create a form instance\n  const {\n    Form,\n    meta: { isSubmitting, canSubmit }\n  } = useForm({\n    onSubmit: async (values, instance) => {\n      // onSubmit (and everything else in React Form)\n      // has async support out-of-the-box\n      await props.addMessageToNode(props.selectedNode, values.message);\n      console.log(values, \"Huzzah!\");\n    },\n    debugForm: false\n  });\n\n  return (\n    <Form>\n        {!props.selectedNode && \n      <div>\n        <label>\n            New node name: {\" \"}\n            <InputField field=\"new_node\" />\n          </label>\n        </div>\n      }\n      <div>\n        <label>\n          Message: {\" \"}\n          <InputArea field=\"message\" />\n        </label>\n      </div>\n\n      <div>\n        <label>\n          Optionally Link to an existing node: \n          <SelectField\n            field=\"favoriteColor\"\n            options={props.node_names}\n          />\n        </label>\n      </div>\n      <div>\n        <button type=\"submit\" disabled={!canSubmit}>\n          Submit\n        </button>\n      </div>\n\n      <div>\n        <em>{isSubmitting ? \"Submitting...\" : null}</em>\n      </div>\n    </Form>\n  );\n}\n\n// view selected node\n// view subheadings for each edge leaving the node\nvar nodes = new DataSet([\n  {\"id\": \"Power\", \"label\": \"Power\", \"type\": \"Primary\", \"text\": \"Hi, this is me posting about power!\"},\n  {\"id\": \"Technology\", \"label\": \"Technology\",\"type\": \"Primary\"},\n  {\"id\": \"Justice\", \"label\": \"Justice\",\"type\": \"Primary\"},\n  {\"id\": \"Industry\", \"label\": \"Industry\",\"type\": \"Primary\"},\n  {\"id\": \"State\", \"label\": \"State\", \"type\": \"Secondary\"},\n  {\"id\": \"Surveillance\", \"label\": \"Surveillance\", \"type\": \"Secondary\"},\n  {\"id\": \"Education\", \"label\": \"Education\", \"type\": \"Secondary\"},\n  {\"id\": \"Epistemologies\", \"label\": \"Epistemologies\", \"type\": \"Secondary\"},\n  {\"id\": \"Policy\", \"label\": \"Policy\", \"type\": \"Secondary\"},\n  {\"id\": \"Indivual\", \"label\": \"Indivual\", \"type\": \"Secondary\"},\n  {\"id\": \"Citizen\", \"label\": \"Citizen\", \"type\": \"Secondary\"},\n  {\"id\": \"Algorithms\", \"label\": \"Algorithms\", \"type\": \"Secondary\"},\n  {\"id\": \"Police\", \"label\": \"Police\", \"type\": \"Secondary\"},\n  {\"id\": \"Software\", \"label\": \"Software\", \"type\": \"Secondary\"},\n  {\"id\": \"Transparency\", \"label\": \"Transparency\", \"type\": \"Secondary\"},\n  {\"id\": \"Hardware\", \"label\": \"Hardware\", \"type\": \"Secondary\"},\n  {\"id\": \"Legibility\", \"label\": \"Legibility\", \"type\": \"Secondary\"},\n  {\"id\": \"Accessibility\", \"label\": \"Accessibility\", \"type\": \"Secondary\"},\n  {\"id\": \"Accountability\", \"label\": \"Accountability\", \"type\": \"Secondary\"},\n  {\"id\": \"Corporations\", \"label\": \"Corporations\", \"type\": \"Secondary\"},\n  {\"id\": \"Money\", \"label\": \"Money\", \"type\": \"Secondary\"},\n  {\"id\": \"Undocumented migrants\", \"label\": \"Undocumented migrants\", \"type\": \"Secondary\"},\n  {\"id\": \"Border control\", \"label\": \"Border control\", \"type\": \"Secondary\"}\n  ]);\n\n  // create an array with edges\n  var edges = new DataSet([\n  {\"from\": \"Power\",\"to\": \"State\",\"label\": \"link 1 and 2\"},\n  {\"from\": \"Power\",\"to\": \"State\",\"label\": \"second edge\"},\n  {\"from\": \"Police\",\"to\": \"Surveillance\"},\n  {\"from\": \"State\",\"to\": \"Police\"},\n  {\"from\": \"Power\",\"to\": \"Education\"},\n  { \"from\": \"Education\", \"to\": \"Epistemologies\" },\n  { \"from\": \"Power\", \"to\": \"Policy\" },\n  { \"from\": \"Power\", \"to\": \"Indivual\" },\n  { \"from\": \"Indivual\", \"to\": \"Citizen\" },\n  { \"from\": \"Power\", \"to\": \"Undocumented migrants\" },\n  { \"from\": \"Undocumented migrants\", \"to\": \"Border control\" },\n  { \"from\": \"Technology\", \"to\": \"Algorithms\" },\n  { \"from\": \"Algorithms\", \"to\": \"Transparency\" },\n  { \"from\": \"Technology\", \"to\": \"Surveillance\" },\n  { \"from\": \"Surveillance\", \"to\": \"Police\" },\n  { \"from\": \"Technology\", \"to\": \"Software\" },\n  { \"from\": \"Technology\", \"to\": \"Hardware\" },\n  { \"from\": \"Justice\", \"to\": \"Transparency\" },\n  { \"from\": \"Justice\", \"to\": \"Legibility\" },\n  { \"from\": \"Justice\", \"to\": \"Accessibility\" },\n  { \"from\": \"Justice\", \"to\": \"Accountability\" },\n  { \"from\": \"Industry\", \"to\": \"Corporations\" },\n  { \"from\": \"Industry\", \"to\": \"Money\" }\n  ]);\n\n\n  async function getDataFromServer (data) {\n\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    return data;\n  }\n  \nfunction Message (props) {\n  return (\n    <li>{props.text}</li>\n  );\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {nodes: [], edges: [], selectedNode: null};\n    this.changeSelectedNode = this.changeSelectedNode.bind(this);\n    this.addMessageToNode = this.addMessageToNode.bind(this);\n  }\n\n\n  getNodes () {\n    fetch('http://66.29.140.14:3000/nodes')\n    .then(res => res.json())\n    .then((data) => {\n      this.setState({ nodes: data })\n    })\n    .catch(console.log)\n  }\n\n  getEdges () {\n    fetch('http://66.29.140.14:3000/links')\n    .then(res => res.json())\n    .then((data) => {\n      this.setState({ edges: data })\n    })\n    .catch(console.log)\n  }\n  \n  componentDidMount() {\n      this.getNodes();\n      this.getEdges();\n  }\n\n  setNode(selectedNode) {\n  }\n  \n  changeSelectedNode(selectedNode) {\n    const nodeObject = this.state.nodes.find(node => node.id === selectedNode);\n    this.setState({ selectedNode: nodeObject});\n    console.log(nodeObject);\n  }\n\n  postNodeToServer(selectedNode, message){\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ id: \"Hierarchy\", label:\"Hierarchy\" })\n  };\n    fetch('http://66.29.140.14:3000/nodes', requestOptions)\n        .then(response => response.json())\n        .then(data => console.log(\"post success\", data));\n  }\n\n  updateNodeToServer(selectedNode, message){\n    const messages = selectedNode.messages ? selectedNode.messages : []; \n    \n    const requestOptions = {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ id: selectedNode.id, label:selectedNode.label, messages: messages.concat(message) })\n  };\n    fetch('http://66.29.140.14:3000/nodes/' + selectedNode.id, requestOptions)\n        .then(response => response.json())\n        .then(data => console.log(\"update success\"));    \n  }\n\n  addMessageToNode(selectedNode, message){\n    this.updateNodeToServer(selectedNode, message);\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n        <div className=\"graph\" style={{ float:`left` }}>\n          <RelatedNetwork\n            nodes= {this.state.nodes}\n            edges= {this.state.edges}\n            changeSelectedNode = {this.changeSelectedNode}\n          />\n        </div>\n        <div className=\"form\" style={{ float:`right` }}>\n          <header className=\"selectedNode\"> {this.state.selectedNode ? \"Selected Node: \" + this.state.selectedNode?.id : \"Create a new node\"} </header>\n          {this.state.selectedNode?.messages?.map(message => \n          <Message\n          text={message}\n          />\n          )}\n          <MyForm\n            selectedNode={this.state.selectedNode}\n            addMessageToNode = {this.addMessageToNode}  \n            node_names = {this.state.nodes.map (n => n.id)}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}